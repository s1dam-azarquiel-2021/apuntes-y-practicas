#+TITLE: PLSQL
#+SETUPFILE: ../../template.org
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../../styles/main.css" />
Numeros del 100 al 1:
#+begin_src sql
SET serveroutput ON;

DECLARE
  lanzamiento NUMBER(3) := 100;
BEGIN
  WHILE lanzamiento > 0 LOOP
    dbms_output.put( lanzamiento || ' ' );
    lanzamiento := lanzamiento - 1;
  END LOOP;

  dbms_output.put_line( '' );
  dbms_output.put_line( 'acabo el bucle' );
END;
#+end_src

Pedir un numero y mostrar sus divisores y si es primo:
#+begin_src sql
SET serveroutput ON;

DECLARE
  numero NUMBER(5) := 0;
  divisores NUMBER(5) := 0;
BEGIN
  numero := &1;
  dbms_output.put_line( 'Divisores de ' || numero || ':' );

  FOR i IN 1 .. numero LOOP
    IF MOD(numero, i) = 0 THEN
      dbms_output.put_line( i );
      divisores := divisores + 1;
    END IF;
  END LOOP;

  IF divisores < 3 THEN
    dbms_output.put_line( 'El numero es primo' );
  ELSE
    dbms_output.put_line( 'El numero no es primo' );
  END IF;
END;
#+end_src

Programa que admite una nota y nos dice con palabras la nota:
#+begin_src sql
SET serveroutput ON;

DECLARE
  nota NUMBER(3,1);
BEGIN
  nota := &1;

  IF nota < 0 THEN
    dbms_output.put_line( 'Tan penoso que tiene nota negativa' );
  ELSIF nota < 3 THEN
    dbms_output.put_line( 'Muy deficiente' );
  ELSIF nota < 5 THEN
    dbms_output.put_line( 'Insuficiente' );
  ELSIF nota < 6 THEN
    dbms_output.put_line( 'Suficiente' );
  ELSIF nota < 7 THEN
    dbms_output.put_line( 'Bien' );
  ELSIF nota < 9 THEN
    dbms_output.put_line( 'Notable' );
  ELSIF nota <= 10 THEN
    dbms_output.put_line( 'Sobresaliente' );
  ELSE
    dbms_output.put_line( 'Vaya nota mas rara tienes' );
  END IF;
END;
#+end_src

Visualizar los 10 ultimos multiplos de 7 menores de 1000
#+begin_src sql
SET serveroutput ON;

DECLARE
  ultimoMultiplo NUMBER(3) := 0;
  desde NUMBER(3) := 999;
  multiplo NUMBER(1) := 7;
  cantidad NUMBER(2) := 10;
BEGIN
  WHILE ultimoMultiplo = 0 LOOP
    IF MOD(desde, multiplo) = 0 THEN
      ultimoMultiplo := desde;
    ELSE
      desde := desde - 1;
    END IF;
  END LOOP;

  FOR i IN 1 .. cantidad LOOP
    dbms_output.put_line( ultimoMultiplo );
    ultimoMultiplo := ultimoMultiplo - multiplo;
  END LOOP;
END;
#+end_src

Numeros capicuas desde el 1000 hasta el 9999 (de 4 cifras):
#+begin_src sql
SET serveroutput ON;

BEGIN
  FOR i IN 1000 .. 9999 LOOP
    IF TRUNC(i / 100) = MOD(i, 10) * 10 + MOD(TRUNC(i / 10), 10) THEN
      dbms_output.put_line( i );
    END IF;
  END LOOP;
END;
#+end_src

Crear un reloj digital:
#+begin_src sql
SET serveroutput ON;

BEGIN
  FOR i IN 0 .. 23 LOOP
    FOR j IN 0 .. 59 LOOP
      dbms_output.put_line( LPAD(i, 2, '0') || ':' || LPAD(j, 2, '0') );
    END LOOP;
  END LOOP;
END;
#+end_src

Programa que acepta un numero de 5 digitos y visualiza cuantos
divisores tieney cuales son:
#+begin_src sql
SET serveroutput ON;

DECLARE
  numero NUMBER(5) := 0;
  raiz NUMBER(3) := 0;
  total NUMBER(3) := 0;
  i NUMBER(5) := 1;
BEGIN
  numero := &1;
  raiz := SQRT(numero);

  WHILE i < TRUNC(numero / 2) AND NOT (i > raiz AND total = 0) LOOP
    IF MOD(numero, i) = 0 THEN
      dbms_output.put_line(i);
      total := total + 1;
    END IF;
    i := i + 1;
  END LOOP;

  IF numero > 1 THEN
    dbms_output.put_line(numero);
    total := total + 1;
  END IF;

  dbms_output.put_line( 'Numero de divisores: ' || total );
END;
#+end_src

Listado de numeros primos hasta 100.000:
#+begin_src sql
SET serveroutput ON SIZE UNLIMITED;

DECLARE
  i NUMBER := 3;
  j NUMBER;
  esPrimo BOOLEAN;
BEGIN
  dbms_output.put_line(1);
  dbms_output.put_line(2);

  WHILE i < 100000 LOOP
    j := 3;
    esPrimo := TRUE;

    WHILE esPrimo AND j <= SQRT(i) LOOP
      IF MOD(i, j) = 0 THEN
        esPrimo := FALSE;
      ELSE
        j := j + 2;
      END IF;
    END LOOP;

    IF esPrimo THEN
      dbms_output.put_line(i);
    END IF;

    i := i + 2;
  END LOOP;
END;
#+end_src

Insertar 100 registros en paises con distinto nombre.
#+begin_src sql
SET serveroutput ON;

DECLARE
  ultimoID NUMBER(3);
BEGIN
  SELECT NVL(MAX(c_pais), 0) + 1 INTO ultimoID FROM paises;
  for i IN 1 .. 100 LOOP
    INSERT INTO paises (c_pais, nombre_pais) VALUES (i + ultimoID, 'Pepino ' || i);
  END LOOP;
END;
#+end_src

Mostrar todos los titulos de las peliculas.
#+begin_src sql
SET serveroutput ON;

DECLARE
  c_min NUMBER(4,0);
  c_max NUMBER(4,0);
  titulo VARCHAR2(16);
BEGIN
  SELECT MIN(c_peli), MAX(c_peli)
  INTO   c_min, c_max
  FROM   peliculas;

  FOR i IN c_min .. c_max LOOP
    SELECT titulo INTO titulo FROM peliculas WHERE c_peli = i;
    dbms_output.put_line( titulo );
  END LOOP;
END;
#+end_src

Visualizar todos los campos de datos de los socios.
#+begin_src sql
SET serveroutput ON;

DECLARE
  c_min NUMBER(4,0);
  c_max NUMBER(4,0);
  nombre VARCHAR2(15);
  ape1 VARCHAR2(15);
  ape2 VARCHAR2(15);
  direccion VARCHAR2(20);
  telefono CHAR(9);
BEGIN
  SELECT MIN(c_socio), MAX(c_socio)
  INTO   c_min, c_max
  FROM   socios;

  dbms_output.put_line(
    '| CODIGO '
    || RPAD('| NOMBRE', 18)
    || RPAD('| APE1', 18)
    || RPAD('| APE2', 18)
    || RPAD('| DIRECCION', 23)
    || RPAD('| TELEFONO', 12)
    || '|'
  );

  FOR i IN c_min .. c_max LOOP
    dbms_output.put_line(RPAD('-',99,'-'));

    SELECT nombre, ape1, ape2, direccion, telefono
    INTO   nombre, ape1, ape2, direccion, telefono
    FROM   socios
    WHERE  c_socio = i;

    dbms_output.put_line(
      RPAD('| ' || i, 9)
      || RPAD('| ' || nombre, 18)
      || RPAD('| ' || ape1, 18)
      || RPAD('| ' || ape2, 18)
      || RPAD('| ' || direccion, 23)
      || RPAD('| ' || telefono, 12)
      || '|'
    );
  END LOOP;
END;
#+end_src

Visualizar los titulos de las peliculas que se han alquilado, junto
con la fecha del ultimo alquiler.
#+begin_src sql
SET serveroutput ON;

DECLARE
  c_min NUMBER(4,0);
  c_max NUMBER(4,0);
  titulo VARCHAR2(16);
  fecha DATE;
BEGIN
  SELECT MIN(c_peli), MAX(c_peli)
  INTO   c_min, c_max
  FROM   peliculas;

  dbms_output.put_line(RPAD('TITULO', 16) || ' | FECHA');
  dbms_output.put_line(RPAD('-',27,'-'));

  FOR i IN c_min .. c_max LOOP
    SELECT titulo, (
      SELECT MAX(fecha)
      FROM   alquiler
      WHERE  c_peli = p.c_peli
    )
    INTO   titulo, fecha
    FROM   peliculas p
    WHERE  c_peli = i;

    IF fecha IS NOT NULL THEN
      dbms_output.put_line(
        RPAD(titulo, 16)
        || ' | '
        || fecha
      );
    END IF;
  END LOOP;
END;
#+end_src

Listado con todos los articulos de la BD VENTAS junto con cuantas
ventas hay de cada uno de ellos, su precio y de que provincia vienen.
#+begin_src sql
SET serveroutput ON;

DECLARE
  c_min NUMBER(3,0);
  c_max NUMBER(3,0);
  ventas NUMBER(5);
  precio NUMBER(4,0);
  provincia VARCHAR2(12);
  articulo VARCHAR2(15);
BEGIN
  SELECT MIN(c_art), MAX(c_art)
  INTO   c_min, c_max
  FROM   articulo;

  dbms_output.put_line(
    RPAD('| ARTICULO', 18)
    || '| PRECIO '
    || '| VENTAS '
    || RPAD('| PROVINCIA', 15)
    || '|'
  );
  dbms_output.put_line(RPAD('-',52,'-'));

  FOR i IN c_min .. c_max LOOP
    SELECT  precio, descrip, (
      SELECT   SUM(cantidad)
      FROM     ventas
      WHERE    c_art = i
      GROUP BY c_art
    ), (
      SELECT provincia
      FROM   proveedor
      WHERE  c_provee = a.c_provee
    )
    INTO  precio, articulo, ventas, provincia
    FROM  articulo a
    WHERE c_art = i;

    dbms_output.put_line(
      '| ' || RPAD(articulo, 15)
      || ' | ' || RPAD(precio, 6)
      || ' | ' || RPAD(ventas, 6)
      || ' | ' || RPAD(provincia, 12)
      || ' |'
    );
    dbms_output.put_line(RPAD('-',52,'-'));
  END LOOP;
END;
#+end_src

Visualizar los 3 articulos que mÃ¡s cantidad hemos vendido.
#+begin_src sql
SET serveroutput ON;

DECLARE
  articulo VARCHAR2(15);
BEGIN
  FOR i IN 1 .. 3 LOOP
    SELECT nombre
    INTO   articulo
    FROM (
      SELECT nombre, rownum as fila
      FROM (
        SELECT   descrip as nombre
        FROM     articulo a
        ORDER BY (
          SELECT SUM(cantidad)
          FROM   ventas
          WHERE  c_art = a.c_art
        ) DESC
      )
    )
    WHERE fila = i;

    dbms_output.put_line( articulo );
  END LOOP;
END;
#+end_src

#+begin_src sql
SET serveroutput ON;

DROP TABLE gangastoledo;
CREATE TABLE gangastoledo (
  codigo NUMBER(3) NOT NULL,
  nombre VARCHAR2(15),
  precio NUMBER(6),
  origen VARCHAR2(12),
  cuantas_ven NUMBER(4),
  cuantos_cli NUMBER(4),
  CONSTRAINT pk_codigo_gangas PRIMARY KEY(codigo)
);

DECLARE
  c_min NUMBER(3);
  c_max NUMBER(3);
  codigo NUMBER(3);
  articulo VARCHAR2(15);
  precio NUMBER(6);
  proveedor VARCHAR2(15);
  n_ven NUMBER(4);
  n_cli NUMBER(4);
BEGIN
  SELECT MIN(c_art), MAX(c_art)
  INTO   c_min, c_max
  FROM   articulo;

  FOR i IN c_min .. c_max LOOP
    SELECT c_art, descrip, precio, (
      SELECT n_prov
      FROM   proveedor
      WHERE  c_provee = a.c_provee
    ), (
      SELECT COUNT(c_factura)
      FROM   ventas
      WHERE  c_art = a.c_art
    ), (
      SELECT COUNT(DISTINCT c_cliente)
      FROM   ventas
      WHERE  c_art = a.c_art
    )
    INTO   codigo, articulo, precio, proveedor, n_ven, n_cli
    FROM   articulo a
    WHERE  c_art = i;

    INSERT INTO gangastoledo
    VALUES (
      codigo, articulo, precio, proveedor, n_ven, n_cli
    );
  END LOOP;
END;
#+end_src

Listar nombre area, nombre instituto ganador, instituto que mas puntos
tiene, puntos obtenidos.
#+begin_src sql
SET serveroutput ON;

DECLARE
  c_min NUMBER(2);
  c_max NUMBER(2);
  area VARCHAR2(25);
  ganador VARCHAR2(25);
  institutoMasPuntos VARCHAR2(25);
  masPuntos NUMBER;
BEGIN
  SELECT MIN(c_area), MAX(c_area)
  INTO   c_min, c_max
  FROM   area;

  dbms_output.put_line(
    RPAD('| AREA ', 20)
    || RPAD('| GANADOR', 20)
    || RPAD('| MAS PUNTOS', 20)
    || '| PUNTOS |'
  );
  dbms_output.put_line(RPAD('-',70,'-'));

  FOR i IN c_min .. c_max LOOP
    SELECT   MAX(SUM(ptos))
    INTO     masPuntos
    FROM     alumno al, participa pa
    WHERE    c_area = i
      AND    al.dni = pa.dni
    GROUP BY ies;

    SELECT descrip, (
      SELECT nombre_i
      FROM   instituto
      WHERE  ies = a.ies_ganador
    ), (
      SELECT nombre_i
      FROM   instituto
      WHERE  ies = (
        SELECT   ies
        FROM     alumno al, participa pa
        WHERE    c_area = i
          AND    al.dni = pa.dni
        GROUP BY ies
        HAVING   SUM(ptos) = masPuntos
      )
    )
    INTO   area, ganador, institutoMasPuntos
    FROM   area a
    WHERE  c_area = i;

    dbms_output.put_line(
      RPAD('| ' || area, 20)
      || RPAD('| ' || ganador, 20)
      || RPAD('| ' || institutoMasPuntos, 20)
      || RPAD('| ' || masPuntos, 8)
      || ' |'
    );
    dbms_output.put_line(RPAD('-',70,'-'));
  END LOOP;
END;
#+end_src

Poner el ies que gano realmente en cada area.
#+begin_src sql
SET serveroutput ON;

DECLARE
  c_min NUMBER(2);
  c_max NUMBER(2);
  masPuntos NUMBER;
  institutoMasPuntos NUMBER(2);
BEGIN
  SELECT MIN(c_area), MAX(c_area)
  INTO   c_min, c_max
  FROM   area;

  FOR i IN c_min .. c_max LOOP
    SELECT   MAX(SUM(ptos))
    INTO     masPuntos
    FROM     alumno al, participa pa
    WHERE    c_area = i
      AND    al.dni = pa.dni
    GROUP BY ies;

    SELECT ies
    INTO   institutoMasPuntos
    FROM   instituto
    WHERE  ies = (
      SELECT   ies
      FROM     alumno al, participa pa
      WHERE    c_area = i
        AND    al.dni = pa.dni
      GROUP BY ies
      HAVING   SUM(ptos) = masPuntos
    );

    UPDATE area a
    SET    ies_ganador = institutoMasPuntos
    WHERE  c_area = i;
  END LOOP;
END;
#+end_src

Listado con el nombre del ALUMNO junto con el numero de areas en las
que ha participado.
#+begin_src sql
SET serveroutput ON;

DECLARE
  numeroAlumnos NUMBER;
  dniActual NUMBER(8);
  participaciones NUMBER;
BEGIN
  SELECT COUNT(dni)
  INTO   numeroAlumnos
  FROM   alumno;

  dbms_output.put_line(RPAD('DNI',8) || ' | PARTICIPACIONES');
  dbms_output.put_line(RPAD('-',26,'-'));

  FOR i IN 1 .. numeroAlumnos LOOP
    SELECT dni
    INTO   dniActual
    FROM (
      SELECT dni, rownum as fila
      FROM   alumno
    )
    WHERE fila = i;

    SELECT COUNT(c_area)
    INTO   participaciones
    FROM   participa
    WHERE  dni = dniActual;

    dbms_output.put_line(RPAD(dniActual,8) || ' | ' || participaciones);
  END LOOP;
END;
#+end_src

Listado con el nombre del INSTITUTO junto con el numero de areas en las
que ha participado.
#+begin_src sql
SET serveroutput ON;

DECLARE
  numeroInstitutos NUMBER;
  institutoActual NUMBER(2);
  nombreInstitutoActual VARCHAR2(25);
  participaciones NUMBER;
BEGIN
  SELECT COUNT(ies)
  INTO   numeroInstitutos
  FROM   instituto;

  dbms_output.put_line(RPAD('INSTITUTO',20) || ' | PARTICIPACIONES');
  dbms_output.put_line(RPAD('-',38,'-'));

  FOR i IN 1 .. numeroInstitutos LOOP
    SELECT ies, nombre_i
    INTO   institutoActual, nombreInstitutoActual
    FROM (
      SELECT ies, nombre_i, rownum as fila
      FROM   instituto
    )
    WHERE fila = i;

    SELECT COUNT(DISTINCT c_area)
    INTO   participaciones
    FROM   participa
    WHERE  dni IN (
      SELECT dni
      FROM   alumno
      WHERE  ies = institutoActual
    );

    dbms_output.put_line(
      RPAD(nombreInstitutoActual,20)
      || ' | '
      || participaciones
    );
  END LOOP;
END;
#+end_src

Crear una funcion para comprobar si un numero es primo:
#+begin_src sql
CREATE OR REPLACE FUNCTION ESPRIMO
( NUMERO IN NUMBER
) RETURN BOOLEAN AS
  i NUMBER := 3;
BEGIN
  IF numero = 2 THEN
    return true;
  ELSIF MOD(numero, 2) = 0 THEN
    return false;
  ELSE
    WHILE i <= SQRT(numero) LOOP
      IF MOD(numero, i) = 0 THEN
        return false;
      ELSE
        i := i + 2;
      END IF;
    END LOOP;
  END IF;
  return true;
END ESPRIMO;
#+end_src

#+begin_src sql
SET serveroutput ON SIZE UNLIMITED;

BEGIN
  FOR x IN 1 .. 100 LOOP
    IF esPrimo(x) THEN
      dbms_output.put_line(x || ' es primo');
    END IF;
  END LOOP;
END;
#+end_src

Realizar una funcion DIVISOR con un parametro de entrada y nos
devuelve cuantos divisores tiene.
#+begin_src sql
CREATE OR REPLACE FUNCTION DIVISOR
( NUMERO IN NUMBER
) RETURN NUMBER AS
  divisores NUMBER := 2;
BEGIN
  IF numero = 0 THEN
    return 0;
  ELSIF numero = 1 THEN
    return 1;
  ELSE
    FOR i IN 2 .. TRUNC(numero / 2) LOOP
      IF MOD(numero, i) = 0 THEN
        divisores := divisores + 1;
      END IF;
    END LOOP;
  END IF;

  return divisores;
END DIVISOR;
#+end_src

#+begin_src sql
SET serveroutput ON;

BEGIN
  FOR x IN 1 .. 100 LOOP
    dbms_output.put_line('Divisores de ' || x || ': ' || divisor(x));
  END LOOP;
END;
#+end_src

Realizar una funcion MAYOR con 3 parametros de entrada y nos devuelva
el mayor de los 3.
#+begin_src sql
CREATE OR REPLACE FUNCTION MAYOR
( NUMERO1 IN NUMBER
, NUMERO2 IN NUMBER
, NUMERO3 IN NUMBER
) RETURN NUMBER AS
BEGIN
  IF numero1 >= numero2 AND numero2 >= numero3 THEN
    return numero1;
  ELSIF numero2 >= numero1 AND numero2 >= numero3 THEN
    return numero2;
  ELSE
    return numero3;
  END IF;
END MAYOR;
#+end_src

#+begin_src sql
SET serveroutput ON;

BEGIN
  dbms_output.put_line('Mayor: ' || MAYOR(1,63,3));
END;
#+end_src

Procedimiento con 4 parametros, de entrada el nombre del pais y anio,
de salida cuantas y el precio maximo.
#+begin_src sql
create or replace
PROCEDURE CONSULTA
( NOMBRE IN VARCHAR2
, ANIO IN NUMBER
, CUANTOS OUT NUMBER
, PRECIOMAX OUT NUMBER
) AS
BEGIN
  SELECT COUNT(c_peli), NVL(MAX(precio), 0)
  INTO   cuantos, preciomax
  FROM   peliculas
  WHERE  c_pais = (
    SELECT c_pais
    FROM   paises
    WHERE  nombre_pais = nombre
  ) AND  anno = anio;
END CONSULTA;
#+end_src

#+begin_src sql
SET serveroutput ON;

DECLARE
  pais VARCHAR2(16) := 'Holanda';
  anio NUMBER := 2000;
  cuantos NUMBER;
  precioMax NUMBER;
BEGIN
  consulta(pais, anio, cuantos, precioMax);
  dbms_output.put_line(
    'Peliculas de ' || pais
    || ' en el ' || anio
    || ': ' || cuantos
    || ', precio mas alto: ' || precioMax
  );
END;
#+end_src

Procedimiento con 3 parametros, de entrada el nombre del socio y de
salida cuantas peliculas ha visto y cuantas no ha devuelto.
#+begin_src sql
CREATE OR REPLACE PROCEDURE CONTROL
(
  NOMBRE_SOCIO IN VARCHAR2
, CUANTAS OUT NUMBER
, NO_DEVUELTAS OUT NUMBER
) AS
  socio NUMBER(4);
BEGIN
  SELECT c_socio
  INTO   socio
  FROM   socios
  WHERE  nombre = nombre_socio;

  SELECT count(c_peli)
  INTO   cuantas
  FROM   alquiler a
  WHERE  c_socio = socio;

  SELECT count(c_peli)
  INTO   no_devueltas
  FROM   alquiler
  WHERE  c_socio = socio
    AND  devuelta = 'N';
END CONTROL;
#+end_src

#+begin_src sql
SET serveroutput ON;

DECLARE
  nombre VARCHAR2(15) := 'pepe';
  cuantas NUMBER;
  no_devueltas NUMBER;
BEGIN
  control(nombre, cuantas, no_devueltas);
  dbms_output.put_line(
    'Peliculas vistas por ' || nombre
    || ': ' || cuantas
    || ', no devueltas: ' || no_devueltas
  );
END;
#+end_src

Procedimiento ACTUALIZA que actualice correctamente el NUM_ALUMNOS de
la tabla instituto visualizando los cambios que va haciendo.
#+begin_src sql
create or replace
PROCEDURE ACTUALIZA AS
  numeroInstitutos NUMBER;
  institutoActual NUMBER;
  numeroAlumnosGuardado NUMBER;
  numeroAlumnosReal NUMBER;
BEGIN
  SELECT COUNT(ies)
  INTO   numeroInstitutos
  FROM   instituto;

  FOR i IN 1 .. numeroInstitutos LOOP
    SELECT num_alumnos, num_alumnos_real, ies
    INTO   numeroAlumnosGuardado, numeroAlumnosReal, institutoActual
    FROM (
      SELECT ies, num_alumnos, (
        SELECT COUNT(dni)
        FROM   alumno
        WHERE  ies = i.ies
      ) as num_alumnos_real, rownum as fila
      FROM   instituto i
    )
    WHERE fila = i;

    IF numeroAlumnosGuardado != numeroAlumnosReal THEN
      UPDATE instituto
      SET    num_alumnos = numeroAlumnosReal
      WHERE  ies = institutoActual;

      dbms_output.put_line(
        'Arreglado ' || institutoActual || ': '
        || numeroAlumnosGuardado || ' -> ' || numeroAlumnosReal
      );
    END IF;
  END LOOP;
END ACTUALIZA;
#+end_src

#+begin_src sql
SET serveroutput ON;

DECLARE
BEGIN
  actualiza();
END;
#+end_src

Ejemplo de cursor, visualizar todos los titulos:
#+begin_src sql
SET serveroutput ON;

DECLARE
  titulo VARCHAR2(16);

  CURSOR curTitulo IS
  SELECT titulo
  FROM peliculas;
BEGIN
  OPEN curTitulo;
  FETCH curTitulo
  INTO titulo;
  WHILE curTitulo%FOUND LOOP
    dbms_output.put_line(titulo);

    FETCH curTitulo
    INTO titulo;
  END loop;
  CLOSE curTitulo;
END;
#+end_src

En COMIDA realizar un script que visualice la fecha del pedido con el
nombre del cliente que ha hecho el pedido, de todos los pedidos que
hay.
#+begin_src sql
SET serveroutput ON;

DECLARE
  fecha DATE;
  nombre VARCHAR2(14);

  CURSOR curPedido IS
  SELECT fped, (
    SELECT nombre
    FROM   cliente
    WHERE  idcli = p.idcli
  )
  FROM   pedido p;
BEGIN
  OPEN curPedido;
  FETCH curPedido
  INTO fecha, nombre;
  WHILE curPedido%FOUND LOOP
    dbms_output.put_line(fecha || ' -> ' || nombre);

    FETCH curPedido
    INTO fecha, nombre;
  END loop;
  CLOSE curPedido;
END;
#+end_src

Realizar un script que visualice los dias en que se vende algo y que
se vende ese dia, asi como el nombre de quien lo compra.
#+begin_src sql
SET serveroutput ON;

DECLARE
  fecha DATE;
  nombre VARCHAR2(14);
  pedido NUMBER(4);
  articulo VARCHAR2(15);

  CURSOR curFechas IS
  SELECT DISTINCT fped
  FROM   pedido p
  ORDER BY 1 ASC;

  CURSOR curVentas IS
  SELECT idped, (
    SELECT nombre
    FROM   cliente
    WHERE  idcli = p.idcli
  )
  FROM   pedido p
  WHERE  fped = fecha;

  CURSOR curArticulos IS
  SELECT (
    SELECT descrip
    FROM   articulo
    WHERE  idart = d.idart
  )
  FROM   detalle d
  WHERE  idped = pedido;
BEGIN
  OPEN curFechas;
  FETCH curFechas
  INTO fecha;
  WHILE curFechas%FOUND LOOP
    dbms_output.put_line(fecha || ':');

    OPEN curVentas;
    FETCH curVentas
    INTO  pedido, nombre;
    WHILE curVentas%FOUND LOOP
      dbms_output.put(nombre || ' -> ');

      OPEN curArticulos;
      FETCH curArticulos
      INTO  articulo;
      WHILE curArticulos%FOUND LOOP
        dbms_output.put(articulo || ' ');

        FETCH curArticulos
        INTO  articulo;
      END loop;
      CLOSE curArticulos;

      FETCH curVentas
      INTO  pedido, nombre;
    END loop;
    CLOSE curVentas;

    dbms_output.put_line('');

    FETCH curFechas
    INTO fecha;
  END loop;
  CLOSE curFechas;
END;
#+end_src

De la base de datos TIENDA realizar procedimiento UNAVENTA que inserte
un registro en ventas, tiene 4 parametros: nombre articulo, nombre
cliente, cantidad y precio. El procedimiento tiene que comprobar si el
articulo existe y si el cliente existe.
#+begin_src sql
create or replace
PROCEDURE UNAVENTA
( ARTICULO IN VARCHAR2
, CLIENTE IN VARCHAR2
, CANTIDAD IN NUMBER
, PRECIO OUT NUMBER
) AS
clis NUMBER(3);
arts NUMBER(3);
art_c NUMBER(3);
cli_c NUMBER(3);
fac_c NUMBER(3);
art_stock NUMBER(3);
BEGIN
  SELECT COUNT(c_art)
  INTO   arts
  FROM   articulo
  WHERE  descrip = articulo;

  IF arts <= 0 THEN
    dbms_output.put_line('El articulo no existe');
    return;
  END IF;

  SELECT COUNT(c_cliente)
  INTO   clis
  FROM   clientes
  WHERE  nombre = cliente;

  IF clis <= 0 THEN
    dbms_output.put_line('El cliente no existe');
    return;
  END IF;

  SELECT c_art
  INTO   art_c
  FROM   articulo
  WHERE  descrip = articulo;

  SELECT c_cliente
  INTO   cli_c
  FROM   clientes
  WHERE  nombre = cliente;

  SELECT stock
  INTO   art_stock
  FROM   articulo
  WHERE  c_art = art_c;

  IF art_stock < cantidad THEN
    dbms_output.put_line('No hay suficiente stock');
    return;
  END IF;

  SELECT a.precio * cantidad
  INTO   precio
  FROM   articulo a
  WHERE  c_art = art_c;

  SELECT MAX(c_factura)
  INTO   fac_c
  FROM   ventas;

  INSERT INTO ventas
  VALUES (fac_c + 1, art_c, cantidad, precio, sysdate, cli_c);

  UPDATE articulo
  SET    stock = stock - art_stock
  WHERE  c_art = art_c;
END UNAVENTA;
#+end_src

#+begin_src sql
SET serveroutput ON;

DECLARE
  ARTICULO VARCHAR2(15) := 'pizarra';
  CLIENTE VARCHAR2(15) := 'Pepito';
  CANTIDAD NUMBER := 5;
  PRECIO NUMBER;
BEGIN
  unaventa(articulo, cliente, cantidad, precio);
  IF precio IS NOT NULL THEN
    dbms_output.put_line('El precio de la compra es: ' || precio);
  END IF;
END;
#+end_src

Realiza un procedimiento NECESITA que visualice los articulos que hay
que pedir al proveedor. Tenemos que tener 20 unidades de articulos,
como minimo, si no los tenemos los pedimos al proveedor.
#+begin_src sql
CREATE OR REPLACE PROCEDURE NECESITA AS
  articulo VARCHAR2(15);
  stock NUMBER(3);
  proveedor VARCHAR2(12);

  CURSOR curStock IS
  SELECT descrip, stock, (
    SELECT n_prov
    FROM   proveedor
    WHERE  c_provee = a.c_provee
  )
  FROM   articulo a
  WHERE  stock < 20;
BEGIN
  OPEN curStock;
  FETCH curStock
  INTO articulo, stock, proveedor;

  IF curStock%FOUND THEN
    dbms_output.put_line(
      RPAD('Articulo', 15)
      || ' | ' || RPAD('Proveedor', 12)
      || ' | ' || 'Cuantos'
    );
    dbms_output.put_line(RPAD('-',40,'-'));
  END IF;

  WHILE curStock%FOUND LOOP
    dbms_output.put_line(
      RPAD(articulo, 15)
      || ' | ' || RPAD(proveedor, 12)
      || ' | ' || (20 - stock)
    );

    FETCH curStock
    INTO articulo, stock, proveedor;
  END loop;
  CLOSE curStock;
END NECESITA;
#+end_src

#+begin_src sql
SET serveroutput ON;

DECLARE
BEGIN
  necesita();
END;
#+end_src

Procedimiento que realice un LISTADO con el nombre del alumno junto
con el numero de areas en las que ha participado. Trabajamos en la
tabla MIEXAMEN empleando cursores.
#+begin_src sql
CREATE OR REPLACE PROCEDURE LISTADO AS
  nombre VARCHAR2(25);
  participaciones NUMBER;

  CURSOR curParticip IS
  SELECT nombre, (
    SELECT COUNT(c_area)
    FROM   participa
    WHERE  dni = a.dni
  )
  FROM   alumno a;
BEGIN
  OPEN curParticip;
  FETCH curParticip
  INTO nombre, participaciones;

  IF curParticip%FOUND THEN
    dbms_output.put_line(
      RPAD('Nombre', 25)
      || ' | ' || 'Participaciones'
    );
    dbms_output.put_line(RPAD('-',43,'-'));
  END IF;

  WHILE curParticip%FOUND LOOP
    dbms_output.put_line(
      RPAD(nombre, 25)
      || ' | ' || participaciones
    );

    FETCH curParticip
    INTO nombre, participaciones;
  END loop;
  CLOSE curParticip;
END LISTADO;
#+end_src

#+begin_src sql
SET serveroutput ON;

DECLARE
BEGIN
  listado();
END;
#+end_src

Realiza un procedimiento LASAREAS con 1 parametro de entrada,
nombre_area, y nos visualiza los nombres instituto participantes y
el nombre del instituto ganador.
#+begin_src sql
create or replace
PROCEDURE LASAREAS
(
  NOMBRE_AREA IN VARCHAR2
) AS
  cod_area NUMBER(2);
  ganador VARCHAR(25);
  participante VARCHAR2(25);

  CURSOR curParticip IS
  SELECT nombre_i
  FROM   instituto
  WHERE  ies IN (
    SELECT ies
    FROM   alumno
    WHERE  dni IN (
      SELECT dni
      FROM   participa
      WHERE  c_area = (
        SELECT c_area
        FROM   area
        WHERE  descrip = nombre_area
      )
    )
  );
BEGIN
  SELECT nombre_i
  INTO   ganador
  FROM   instituto
  WHERE  ies = (
    SELECT ies_ganador
    FROM   area
    WHERE  descrip = nombre_area
  );

  dbms_output.put_line('Ganador: ' || ganador);

  OPEN curParticip;
  FETCH curParticip
  INTO participante;

  dbms_output.put_line('Participantes:');

  WHILE curParticip%FOUND LOOP
    dbms_output.put_line(participante);

    FETCH curParticip
    INTO participante;
  END loop;
  CLOSE curParticip;
END LASAREAS;
#+end_src

#+begin_src sql
SET serveroutput ON;

DECLARE
BEGIN
  lasareas('cocina');
END;
#+end_src
