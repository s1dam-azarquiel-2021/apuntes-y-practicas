#+TITLE: Practica 5E
#+SETUPFILE: ../../template.org
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../../styles/main.css" />
* Scripts iniciales I
1. Crea un script parametros.sh que nos diga el número de parámetros
   pasados por línea de comando y que nos muestre por pantalla dichos
   comandos.
   #+begin_src shell :tangle P_5e-scripts/parametros.sh :shebang "#!/bin/sh"
   # parametros.sh
   echo "Numero de parametros:" $#
   echo $@
   echo "-----"

   for parameter in $@
   do
       echo $parameter
   done
   #+end_src

2. Crea un script suma.sh al cual le pasemos dos números por línea de
   comando y nos los sume.
   #+begin_src shell :tangle P_5e-scripts/suma.sh :shebang "#!/bin/sh"
   # suma.sh
   echo "Suma:" $(($1 + $2))
   #+end_src

3. Modifica el script anterior para que en caso de que no le pasemos
   ningún parámetro nos los solicite de modo interactivo. Si le
   pasamos un solo parámetro nos solicitará el otro número a sumar. Si
   le pasamos más de dos parámetros nos dirá que el uso es incorrecto
   y nos mostrará la ayuda del comando.
   #+begin_src shell :tangle P_5e-scripts/suma_v2.sh :shebang "#!/bin/sh"
   # suma_v2.sh
   n1=$1
   n2=$2

   if [ $# -lt 1 ]
   then
       echo -n "Introduce el primer numero: "
       read n1
   fi

   if [ $# -lt 2 ]
   then
       echo -n "Introduce el segundo numero: "
       read n2
   fi

   if [ $# -gt 2 ]
   then
       echo "Solo puedes pasar 2 numeros."
   else
       echo "Suma:" $(($n1 + $n2))
   fi
   #+end_src

4. Crea un script sumaparametros.sh que nos sume todos los parámetros
   pasados por línea de comando y nos muestre el resultado. Si no se
   pasa ningún parámetro nos mostrará una ayuda de cómo usarlo.
   #+begin_src shell :tangle P_5e-scripts/sumaparametros.sh :shebang "#!/bin/sh"
   # sumaparametros.sh
   [[ $# -eq 0 ]] \
       && echo "Tienes que meter al menos 1 numero." \
       && exit 1

   suma=0
   for n in $@
   do
       suma=$(($suma + $n))
   done

   echo "Suma:" $suma
   #+end_src

5. Escribe un script divisible.sh al que nos diga si un número es
   divisible por otro número. Para ello el script puede aceptar
   parámetros de entrada por línea de comando o solicitar dichos
   parámetros al usuario. La forma de uso será.
   #+begin_src shell :tangle P_5e-scripts/divisible.sh :shebang "#!/bin/sh"
   # divisible.sh
   [[ $# -gt 2 ]] \
       && echo "Puedes pasar como maximo 2 numeros." \
       && exit 1

   n1=$1
   n2=$2

   if [ $# -lt 1 ]
   then
       echo -n "Introduce el primer numero: "
       read n1
   fi

   if [ $# -lt 2 ]
   then
       echo -n "Introduce el segundo numero: "
       read n2
   fi

   [[ $((n1 % n2)) -eq 0 ]] \
       && echo "Es divisible" \
           || echo "No es divisible"
   #+end_src

6. Escribe un script comprime.sh que nos guarde una copia de seguridad
   de un directorio dado en un fichero dado. Los parámetros los
   podremos pasar por línea de comando o bien solicitar al usuario. El
   comando utilizará el programa tar, con las opción de compresión. El
   script comprobará que el número de parámetros pasados es el
   correcto y que el directorio existe. Si no se pasan parámetros el
   programa entrará en modo interactivo, solicitando los parámetros al
   usuario. El script irá guardando en un fichero copias_seguridad.txt
   el nombre de los ficheros comprimidos, de qué carpetas son y en qué
   fecha se hizo.
   #+begin_src shell :tangle P_5e-scripts/comprime.sh :shebang "#!/bin/sh"
   # comprime.sh
   [[ $# -gt 2 ]] \
       && echo "Maximo 2 parametros" \
       && exit 1

   n1=$1
   n2=$2

   if [ $# -lt 1 ]
   then
       echo -n "Directorio a comprimir: "
       read n1
   fi

   if [ $# -lt 2 ]
   then
       n2="copia.tar"
   fi

   tar cf $n2 $n1

   echo -e \
        "Copia de:" $(realpath $n1) \
        "\nEn:" $(realpath $n2) \
        "\nA las:" $(date) "\n" \
        >> $HOME/copias_seguridad.txt
   #+end_src

7. Escribe un script descomprime.sh que nos descomprima en contenido
   de un fichero .tar en un directorio dado. El comando podrá
   funcionar pasándole los parámetros por línea de comando o bien en
   modo interactivo. Si se le pasa un número erróneo de parámetros nos
   mostrará la ayuda del comando, si no se le pasan parámetros los
   solicitará en modo interactivo. El comando debe comprobar que el
   directorio existe (y es un directorio) y que el fichero .tar existe
   y es un fichero.
   #+begin_src shell :tangle P_5e-scripts/descomprime.sh :shebang "#!/bin/sh"
   # descomprime.sh
   [[ $# -gt 2 ]] \
       && echo "Maximo 2 parametros" \
       && exit 1

   n1=$1
   n2=$2

   if [ $# -lt 1 ]
   then
       echo -n "Fichero a descomprimir: "
       read n1
   fi

   [[ -f $n1 ]] \
       || ( echo "El comprimido no existe" && exit 1 )

   if [ $# -lt 2 ]
   then
       n2=$(basename $n1)
       n2="${n2%.*}"
       mkdir -p $n2
   fi

   [[ -d $n2 ]] \
       || ( echo "El directorio no existe" && exit 1 )

   tar xf $n1 -C $n2
   #+end_src

* Scripts Iniciales II
1. Crear un script llamado borrar que se use asi: ~./borrar.sh
   <fichero>~. Cuyo funcionamiento sea que mueva el fichero a la papelera de
   reciclaje. La papelera de reciclaje tiene que estar en el
   directorio home del usuario que ejecuta el script, y si no existe
   la tiene que crear. Si se le pasa un número de argumentos distinto
   de 1 saldrá un mensaje de error y dirá cómo hay que usar el
   comando. El comando tiene que comprobar que el fichero existe antes
   de moverlo a la papelera de reciclaje si no también mostrará un
   mensaje de error.
   #+begin_src shell :tangle P_5e-scripts/borrar.sh :shebang "#!/bin/sh"
   # borrar.sh
   [[ $# -ne 1 ]] \
       && ( echo "Iserta un parametro tonto" && exit 1 )

   [[ -f $1 ]] \
       || ( echo "No existe el fichero" && exit 1 )

   trash="$HOME/Trash"
   [[ -d $trash ]] \
       || mkdir $trash

   mv $1 $trash
   #+end_src

2. Crear un script llamado vacia-papelera.sh que borre definitivamente
   todos los ficheros de nuestra papelera. El script nos preguntará
   antes si estamos seguros.
   #+begin_src shell :tangle P_5e-scripts/vacia-papelera.sh :shebang "#!/bin/sh"
   # vacia-papelera.sh
   echo -n "Estas seguro? [s/n]:"
   read seguro

   [[ $seguro = "s" ]] \
       && rm -rf "$HOME/Trash" \
           || echo "Pues no la borro"
   #+end_src

3. Crea un script datos_usuario.sh que solicite un nombre de usuario
   por línea de comando de forma interactiva y que nos muestre los
   datos de dicho usuario extrayéndolos del fichero passwd en este
   formato:
   Login: pepe
   Contraseña: x
   UID: 1002
   GID: 1002
   Directorio home: /home/pepe
   Datos del usuario: Pepe Pérez, 645363524,
   Shell por defecto: /bin/bash
   #+begin_src shell :tangle P_5e-scripts/datos_usuario.sh :shebang "#!/bin/sh"
   # datos_usuario.sh
   echo -n "Mete el nombre de un usuario: "
   read usuario

   datos=$(grep $usuario /etc/passwd)
   echo "Login:"             $(echo $datos | cut -f1 -d:)
   echo "Contrasenia:"       $(echo $datos | cut -f2 -d:)
   echo "UID:"               $(echo $datos | cut -f3 -d:)
   echo "GID:"               $(echo $datos | cut -f4 -d:)
   echo "Datos del usuario:" $(echo $datos | cut -f5 -d:)
   echo "Directorio home:"   $(echo $datos | cut -f6 -d:)
   echo "Shell por defecto:" $(echo $datos | cut -f7 -d:)
   #+end_src

* Scripts Iniciales III
1. Escribe un script espar.sh que nos vaya solicitando introducir un
   número hasta que el número introducido sea par.
   #+begin_src shell :tangle P_5e-scripts/espar.sh :shebang "#!/bin/sh"
   # espar.sh

   read n

   while [ $((n % 2)) -ne 0 ]
   do
       read n
   done
   #+end_src

2. Escribe un script ficheroetc.sh que nos solicite introducir nombres
   de ficheros hasta que introduzcamos el nombre de un fichero que
   exista dentro del directorio /etc (y que no sea un directorio).
   #+begin_src shell :tangle P_5e-scripts/ficheroetc.sh :shebang "#!/bin/sh"
   # ficheroetc.sh

   read f

   while [ ! -f "/etc/$f" ]
   do
       read f
   done
   #+end_src

3. Escribe un script buscador.sh que nos solicite el nombre de un
   usuario y el nombre de un fichero y realice una búsqueda desde / y
   almacene el resultado en un fichero busquedas.txt en el cual se van
   acumulando las sucesivas búsquedas de la forma:
   #+begin_src shell :tangle P_5e-scripts/buscador.sh :shebang "#!/bin/sh"
   # buscador.sh

   echo -n "Nombre del user: "
   read user

   echo -n "Fichero: "
   read fname

   for file in $(find / -type f -name "$fname" 2> /dev/null)
   do
       [[ $(stat -c "%U" $file) = $user ]] \
           && echo $file \
           && echo $file "->" $user >> "$HOME/busquedas.txt"
   done
   #+end_src

* Ejercicios avanzados
1. Muestra el nombre de todos los usuarios registrados en el sistema.
   #+begin_src shell :tangle P_5e-scripts/mostrar-usuarios.sh :shebang "#!/bin/sh"
   # mostrar-usuarios

   echo "Usuarios del sistema: "
   while IFS= read -r user
   do
       [[ $(echo $user | cut -f3 -d:) -lt 1000 \
              || $(echo $user | cut -f6 -d:) = "/var/empty" ]] \
           && echo $user | cut -f1 -d:
   done < "/etc/passwd"

   echo -e "\nUsuarios normales: "
   while IFS= read -r user
   do
       [[ $(echo $user | cut -f3 -d:) -ge 1000 \
              && $(echo $user | cut -f6 -d:) != "/var/empty" ]] \
           && echo $user | cut -f1 -d:
   done < "/etc/passwd"
   #+end_src

2. Muestra todos los usuarios, junto con el shell que tienen.
   #+begin_src shell :tangle P_5e-scripts/mostrar-usuarios-con-shell.sh :shebang "#!/bin/sh"
   # mostrar-usuarios-con-shell

   while IFS= read -r user
   do
       echo -n $(echo $user | cut -f1 -d:) "-> "
       [[ $(echo $user | cut -f7 -d:) != $(which nologin) ]] \
           && echo $user | cut -f7 -d: \
               || echo "Can't login"
   done < "/etc/passwd"
   #+end_src

3. Muestra el home de cada usuario.
   #+begin_src shell :tangle P_5e-scripts/mostrar-homes.sh :shebang "#!/bin/sh"
   # mostrar-homes

   while IFS= read -r user
   do
       echo $(echo $user | cut -f1 -d:)":"
       [[ $(echo $user | cut -f6 -d:) != "/var/empty" ]] \
           && ls -al $(echo $user | cut -f6 -d:) \
               || echo "No home"
   done < "/etc/passwd"
   #+end_src

4. Para cada usuario, muestra los grupos a los que pertenece (lo mismo
   que hace el comando id, pero procesandolo nosotros a partir /etc/*.
   #+begin_src shell :tangle P_5e-scripts/mostrar-grupos.sh :shebang "#!/bin/sh"
   # mostrar-grupos

   while IFS= read -r user
   do
       echo -n $(echo $user | cut -f1 -d:) "-> "
       while IFS= read -r group
       do
           for group_user in $(echo $group | cut -f4 -d: | tr "," " ")
           do
               [[ $group_user = $(echo $user | cut -f1 -d:) ]] \
                   && echo -n $(echo $group | cut -f1 -d:)" " \
                   && break
           done
       done < "/etc/group"
       echo
   done < "/etc/passwd"
   #+end_src
