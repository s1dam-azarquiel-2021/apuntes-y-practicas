#+STARTUP: inlineimages
* Setup

#+begin_src shell
for svg in $(ls generated/*.svg)
do
    sed -Ei 's/textLength="[0-9]*" //g' $svg
    inkscape $svg -w 4096 -b '#1d2021' -o "${svg%.*}.png"
done
#+end_src
#+RESULTS:

#+begin_src text :tangle plantuml-config.txt
skinparam groupInheritance 2

skinparam Default {
        FontName Iosevka Term
        FontColor #ebdbb2
}

skinparam BackgroundColor #1d2021
skinparam Shadowing false
skinparam RoundCorner 15

skinparam Class {
        BackgroundColor #282828
        BorderColor #504945
        ArrowColor #689d6a
}

skinparam Stereotype {
        CBackgroundColor #b8bb26
        CBorderColor #b8bb26
        EBackgroundColor #fe8019
        EBorderColor #fe8019
        ABackgroundColor #83a598
        ABorderColor #83a598
}

skinparam Icon {
        PrivateColor #cc241d
        PrivateBackgroundColor #cc241d
        ProtectedColor #d79921
        ProtectedBackgroundColor #d79921
}
#+end_src

* Ejercicio 1

#+begin_src plantuml :file generated/VentaDeCoches.svg
title Venta de Coches

!include plantuml-config.txt

class Coche {
        - marca : String
        - modelo : String
        - matricula : String
        - precioCompra : float
        - precioVenta : float
        - comprar() : void
        - vender() : void
        - reparar() : void
        - listar() : Coche *
}

enum TipoCoche {
        Turismo
        Industrial
        Todoterreno
}

class Reparacion {
}

enum TipoReparacion {
        Mecanica
        Electrica
        Chapa
}

abstract class Vendedor

class VendedorAsalariado {
        - salario : float
}

class VendedorPorComision {
        - cochesVendidos : int
}

class Exposicion {
        - lugar : String
}

class Cliente

class Proveedor

skinparam Nodesep 100

Cliente "0..1" <-> "0..*" Coche : compra
Cliente "0..*" <-> "0..*" Coche : reserva

Coche "*" <- "1" Proveedor : suministra
Coche "0..*" <-> "0..1" Exposicion : esta
Proveedor -[hidden]d- Exposicion

Coche "1" <--> "0..*" Reparacion : tiene
Coche "0..*" <-- "1" Vendedor : vende

TipoCoche "1" <-- "0..*" Coche : es de tipo

Reparacion "0..*" --> "1" TipoReparacion : es de tipo

Vendedor <|-- VendedorAsalariado
Vendedor <|-- VendedorPorComision
#+end_src

#+RESULTS:
[[file:generated/VentaDeCoches.svg]]

* Ejercicio 2

#+begin_src plantuml :file generated/MatriculaEnLaUniversidad.svg
title Matricula en la Universidad

!include plantuml-config.txt

class Persona {
        # dni : String
        # nombre : Strig
        # direccion : String
        # estadoCivil : String
        - darseDeAlta() : void
}

class Estudiante {
        - listarAsignaturas() : Asignatura *
        - listarNotas() : Nota *
        - matricular(Asignatura a) : void
        - examinar(Asignatura a, float pts, float ptsMax) : void
}

class Asignatura {
        - codigo : int
        - nombre : String
        - listarEstudiantes() : Estudiante *
        - listarNotas() : Nota *
}

class Nota {
        - puntuacion : float
        - puntuacionMaxima : float
}

class Becario {
        - codigo : int
}

class Beca {
        - importeBeca : float
}

class Matricula

class Profesor
class Curso

skinparam Nodesep 100

Persona <|- Estudiante

Estudiante <|-u- Becario
Estudiante "0..*" <--> "1..*" Asignatura : matricula
(Estudiante,Asignatura) .. Matricula
Estudiante "0..*" <--> "1..*" Asignatura : examina
(Estudiante,Asignatura) .. Nota

Becario "0..*" -l> "1" Beca : recibe

Asignatura "1..*" --> "1" Profesor : imparte
Asignatura "1..*" --> "1" Curso : pertenece

Profesor -l-|> Persona
#+end_src

#+RESULTS:
[[file:generated/MatriculaEnLaUniversidad.svg]]

* Ejercicio 3

#+begin_src plantuml :file generated/ElVeterinario.svg
title El Veterinario

!include plantuml-config.txt

class Cliente {
        - codigo : int
        - apellido1 : String
        - numeroCuentaBancaria : String
        - direccion : String
        - telefono : String
}

class Persona {
        - nombre : String
        - dni : String
}

class Paciente {
        - codigo : int
        - alias : String
        - especie : String
        - raza : String
        - colorPelo : String
        - fechaNacimiento : Date
        - pesoMedioUltimas10Visitas : float
        - pesoActual : float
        - aniadirVacuna(CalendarioVacunacion calVac) : void
        - aniadirVacuna(HistorialMedico histMed) : void
}

class Enfermedad {
        - nombre : String
}

class CalendarioVacunacion {
        - fecha : Date
}

class HistorialMedico {
        - fecha : Date
}

skinparam Nodesep 100

Cliente "1..*" o- "1..*" Persona : asocia
Cliente "1" <-- "1..*" Paciente : tiene

Paciente "1" -> "0..*" HistorialMedico : tiene
Paciente "1" -> "0..*" CalendarioVacunacion : tiene
HistorialMedico -[hidden]d- CalendarioVacunacion

Enfermedad "1" <-l- "0..*" HistorialMedico : tiene
Enfermedad "1" <-l- "0..*" CalendarioVacunacion : tiene
#+end_src

#+RESULTS:
[[file:generated/ElVeterinario.svg]]

* Ejercicio 4

#+begin_src plantuml :file generated/LaAsociacion.svg
title La Asociacion

!include plantuml-config.txt

class Persona {
        # nombreCompleto : String
        # darAlta() : void
}

class Socio {
        - codigoAsociado : int
}

class Fecha {
        - dia : int
        - mes : int
        - anio : int
}

class Nif {
        - dni : int
        - letra : char
}

class Asociacion {
        - nombre : String
}

skinparam Nodesep 150

Asociacion "1" *-- "1..*" Socio
Persona <|-- Socio
Persona "1" -r-> "1" Nif : se identifica
Socio "0..*" -r-> "1" Fecha : se da de alta
Persona "0..*" --> "1" Fecha : nace
#+end_src

#+RESULTS:
[[file:generated/LaAsociacion.svg]]

* Ejercicio 5

#+begin_src plantuml :file generated/ElTorneo.svg
title El Torneo

!include plantuml-config.txt

class Torneo

class Jugador {
        - conoceLasReglas : boolean
        - numeroFederado : int
}

class Persona {
        # nombreCompleto : String
}

class Fecha {
        - dia : int
        - mes : int
        - anio : int
}

class Nif {
        - dni : int
        - letra : char
}

class Encuentro {
        - calcularGanador() : Jugador
}

class PuntosPartidas {
        - set1 : int
        - set2 : int
        - set3 : int
}

skinparam Nodesep 100

Persona "0..*" -> "1" Fecha : nace
Persona "1" -> "1" Nif : se identifica
Fecha -[hidden]d- Nif

Jugador -|> Persona

Encuentro "1..*" --> "2" Jugador : juega
(Encuentro, Jugador) .. PuntosPartidas

Torneo "0..*" --> "1" Fecha : se realiza
Torneo "1" --> "1..*" Encuentro : celebra
Torneo "0..*" --> "1" Jugador : gana
#+end_src

#+RESULTS:
[[file:generated/ElTorneo.svg]]

* Ejercicio 6

#+begin_src plantuml :file generated/MaquinaExpendedora.svg
title Maquina Expendedora

!include plantuml-config.txt

class MaquinaExpendedora {
        - recaudado : float
        - pedir(Producto p) : Producto
}

class Contenedor {
        - recargar(Producto p, int cantidad) : void
        - estaVacio() : boolean
        - dispensar(Producto p) : Producto
        - mostrarPrecio(Producto p) : float
}

class Producto {
        - nombre : String
        - precio : float
}

class Display {
        - mostrar(String s) : void
}

class Caja {
        - saldo : float
        - recopilar() : float
        - devolver() : float
}

class Boton {
        - pulsar() : void
}

class BotonDevolucion
class BotonBebida

skinparam Nodesep 100

MaquinaExpendedora "1" --> "1" Contenedor : tiene
MaquinaExpendedora "1" --> "1" Display : muestra
MaquinaExpendedora "1" --> "1" Caja : tiene
MaquinaExpendedora "1" --> "1" BotonBebida 

Contenedor "1" *-- "0..*" Producto : contiene

Caja "1" --> "1" BotonDevolucion

BotonDevolucion --|> Boton
BotonBebida --|> Boton
#+end_src

#+RESULTS:
[[file:generated/MaquinaExpendedora.svg]]

* Ejercicio 7

#+begin_src plantuml :file generated/FacturacionYAlmacenamiento.svg
title Facturacion y Almacenamiento

!include plantuml-config.txt

class Factura {
        - fecha : Date
        - numero : int
        - pagada : boolean
}

class Cajon {
        - aniadir(Factura f) : void
        - quitar(Factura f) : void
}

class Producto {
        - codigo : int
        - descripcion : String
        - precioMinimo : float
        - stock : int
        - stockMinimo : int
}

class Detalle {
        - precioVenta : float
}

class Stock {
        - getAgotados() : Producto *
        - getBajoMinimos() : Producto *
        - darDeAlta(Producto p) : void
        - borrar(Producto p) : void
        - buscar(String s) : Producto
}

Cajon "1" o- "0..*" Factura : tiene

Factura "1" *-- "1..*" Producto : compuesta
Detalle .. (Factura, Producto)

Stock "1" *-- "0..*" Producto : contiene
#+end_src

#+RESULTS:
[[file:generated/FacturacionYAlmacenamiento.svg]]

* Ejercicio 8

#+begin_src plantuml :file generated/CasoCinema.svg
title Caso Cinema

skinparam Nodesep 100

!include plantuml-config.txt

class Multiplex {
        - direccion : String
}

class Salas {
        - ocupacion : int
}

class Butacas {
        - fila : int
        - columna : int
}

class Reserva
class ReservaInternet
class ReservaTelefono

enum TipoButaca {
        General
        Preferencial
        Cinebar
        Fumador
}

class Peliculas {
        - director : String
        - duracion
        - idioma : String
        - resumen : String
}

class Horario {
        - fecha : Date
        - hora
}

class ClienteRegistrado {
        - cuentaBancaria : String
        - descuento : float
}

class Articulos {
        - precio : float
        - nombre : String
}

class Clientes

Multiplex "1" *-l- "1..*" Salas : contienen

Salas "1" *-l- "1..*" Butacas : tienen
Peliculas "1..*" <-- "1..*" Salas : proyectan
(Salas,Peliculas) .. Horario

Butacas "0..*" -l> "1..*" TipoButaca

Reserva "1..*" -l> "1" ClienteRegistrado : realiza
Reserva "1..*" <-- "1..5" Butacas : tiene

ReservaInternet --|> Reserva
ReservaTelefono --|> Reserva

ClienteRegistrado --|> Clientes
Clientes "1" <-- "1..*" Butacas : compra

Articulos "0..*" <-- "0..*" ClienteRegistrado : compra
#+end_src

#+RESULTS:
[[file:generated/CasoCinema.svg]]
